1.- crear el entono virtual y activarlo 
2.- instalar requirements
    Django==3.2.2
    django-cors-headers==3.7.0
    djangorestframework==3.12.4

3.- agregar a sttings apps
    'corsheaders',
    'rest_framework'

    ALLOWED_HOSTS = ['127.0.0.1']
    CORS_ORIGIN_ALLOW_ALL = True

    MIDDLEWARE = [ 'corsheaders.middleware.CorsMiddleware',

4.- ejecutar las migraciones
5.- crear superusuario
6.- inicial el projecto vue
    babel | router | CSS pre-processors
    yes
    2
    2
    npm install axios
    npm install bulma

7.- App.vue [modificar] 
    #12 @import '../node_modules/bulma';
    crea un boton en la plantilla

9.- verifica que este bien el servidor 
    cd todofrontend
    npm run serve 

10.- create app task 
11.- registra la app en sttings

12.- crea el model
    class Todo(models.Model):

        #--ELECCIONES
        TODO = 'todo',
        DONE = 'done'

        #-- ELECCION
        STATUS_CHOICES= (
            (TODO, 'Todo'),
            (DONE, 'Done'),
        )

        #-- COMPOS
        descripcion = models.CharField(max_length=225)
        status = models.CharField(max_length=10, choices=STATUS_CHOICES, default=TODO)

13.- ejecutar las migraciones
    crear serializers.py
    from rest_framework import serializers

    from .models import Task

    class TaskSerializer(serializers.HyperLinkedModelSerializer):
        class Meta:
            model = Task
            fields = ('id', 'description', 'status') 

crear la serializer

    from rest_framework import serializers

    from .models import Task

    class TaskSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = Task
            fields = ('id', 'description', 'status')

14.- crear la el viewSet
    from django.shortcuts import render

    # Create your views here.
    from .models import Task
    from .serializers import TaskSerializer

    from rest_framework import viewsets
    from rest_framework.authentication import BasicAuthentication
    from rest_framework.permissions import IsAuthenticated

    class TaskViewSet(viewsets.ModelViewSet):
        authentication_classes = (BasicAuthentication,)
        permission_classes = (IsAuthenticated,)
        queryset = Task.objects.all()
        serializer_class = TaskSerializer

15.- crear la url directamente al urls principal project/project/urls.py


    from ..task.views import TaskViewSet
    from rest_framework import routers


    route= routers.DefaultRouter()
    #router = routers.SimpleRouter()
    router.register(r'tasks', TaskViewSet) #[1]

    urlpatterns = [
        path('', include(router.urls)),  #[1]#
        path('admin/', admin.site.urls),
    ]

16.- modificar = Home.vue 

#para optener la api

    const API_URL = 'http://127.0.0.1:8000/'
    import axios from 'axios'
    export default {
    name: 'Home',
    data () {
        return {
        tasks: [],
        description: '',
        status: 'todo'
        }
    },
    mounted () {
        this.getTasks()
    },
    methods: {
        getTasks() {
        axios({
            method: 'get',
            url: API_URL + 'tasks/',
        }).then(response => this.tasks = response.data)
        }
    }

#VISUALIZAR API EN EL HTML

    <!-- / las tareas  -->
        <div class="columns iten-center m-6" >
        <div class="column is-6">
            <h2 class="subtitle">To do</h2>

            <div class="todo">
            <div class="card" v-for="task in tasks" v-if="task.status === 'todo'" v-bind:key="task.id">
                <div class="card-content">{{ task.description }}</div>

                <footer class="card-footer">
                <a class="card-footer-item">Done</a>
                </footer>
            </div>
            </div>
        </div>
        <div class="column is-6">
            <h2 class="subtitle">Done</h2>

            <div class="done">
            <div class="card" v-for="task in tasks" v-if="task.status === 'done'" v-bind:key="task.id">
                <div class="card-content">{{ task.description }}</div>

                <footer class="card-footer">
                <a class="card-footer-item" >To do</a>
                </footer>
            </div>
            </div>
        </div>

PARA AGREGAR TAREAS

    addTask() {
      if (this.description) {
        axios({
          method: 'post',
          url: API_URL + 'tasks/',
          data: {
            description: this.description,
            status: this.status
          },
        }).then((response) => {
          let newTask = {
            'id': response.data.id,
            'description': this.description,
            'status': this.status
          }
          this.tasks.push(newTask)
          this.description = ''
          this.status = 'todo'
        }).catch((error) => {
          console.log(error)
        })
      }
    },

    HTML

        <!-- ADDTASK -->
        <form v-on:submit.prevent="addTask">   <!-- aqui el methdo agregar -->
          <h2 class="subtitle">Add task</h2> 

          <div class="field">
            <label class="label">Description</label>
            <div class="control">
              <input class="input" type="text" v-model="description">  <!-- DESCRIPTCION -->
            </div>
          </div>

          <div class="field">
            <label class="label">Status</label>
            <div class="control">
              <div class="select">
                <select v-model="status">   <!-- aqui el ESTATUS agregar -->

                <!-- LAS OPCIONES SIMPLES STRINGS -->
                  <option value="todo">To do</option>   
                  <option value="done">Done</option>
                </select>
              </div>
            </div>
          </div>

          <div class="field">
            <div class="control">
              <!-- BOTTON PARA SUBMIT DEL FORMULARIO -->
              <button class="button is-link">Submit</button>  
            </div>
          </div>
        </form>

PARA CAMBIAR EL ESTATUS

    setStatus(task_id, status) {
      const task = this.tasks.filter(task => task.id === task_id)[0]
      const description = task.description
      axios({
        method: 'put',
        url: API_URL + 'tasks/' + task_id + '/',
        headers: {
          'Content-Type': 'application/json',
        },
        data: {
          status: status,
          description: description
        },
        auth: {
          username: 'admin',
          password: 'RfvTgb123'
        }
      }).then(() => {
        task.status = status
      })

    HTML    
        SETSTATUS TODO => DONE
        <div class="todo">
            <div class="card" v-for="task in tasks" v-if="task.status === 'todo'" v-bind:key="task.id">
            <div class="card-content">{{ task.description }}</div>

            <footer class="card-footer">
            <a class="card-footer-item" @click="setStatus(task.id, 'done')">Done</a>  [ set status done]
            </footer>

            </div>
        </div>

        SETSTATUS DONE => TODO
        <div class="done">
          <div class="card" v-for="task in tasks" v-if="task.status === 'done'" v-bind:key="task.id">
            <div class="card-content">{{ task.description }}</div>

            <footer class="card-footer">
              <a class="card-footer-item" @click="setStatus(task.id, 'todo')">To do</a>
            </footer>
          </div>
        </div>
